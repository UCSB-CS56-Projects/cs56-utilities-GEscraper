<project default="compile">

  <!-- build.xml for Mantis ID 0000089, W11, CS56
       name: Emilie Menard Barnard -->

  <!-- Significant change/reformat build.xml for Github, W15, CS56 
       name: Brent Kirkland, Dylan Lynch -->

<property environment="env"/> <!-- load the environment variables -->
<property name="webRoot" value="${env.HOME}/public_html/"/>
<property name="webBaseUrl" value="http://www.cs.ucsb.edu/~${env.USER}"/>

<property name="course" value="cs56"/>
<property name="quarter" value="W15"/>
<property name="projectName" value="GEscraper"/>
<property name="mainClass" value="edu.ucsb.cs56.W15.GEscraper.GEscraper"/>
<property name="projectPath" value="${course}/${quarter}/${projectName}"/>

<property name="javadocDest" value="${webRoot}/${projectName}/javadoc"/>
<property name="javadocURL" value="${webBaseUrl}/${projectName}/javadoc"/>

<path id="project.class.path">
  <pathelement location="build"/>
  <pathelement location="lib/junit-4.8.2.jar"/>
  <pathelement location="lib/jsoup-1.8.3.jar"/>

</path>

<!-- Compile src code -->
<target name = "compile" description="compiles src code into .class files and stores them in build directory">
  <mkdir dir="build"/>
  <javac srcdir="src" destdir="build" debug="true" debuglevel="lines,source" includeantruntime="false">
    <classpath refid="project.class.path"/>
  </javac>
</target>

<!-- Run the scraper -->
<target name="run" depends="compile, jar" description="run the GEscraper"> 
  <java fork="true" classname="${mainClass}">
    <classpath refid="project.class.path"/>
  </java>
</target>

<!-- Clean the directories -->
<target name="clean" description="delete unnecessary files and directories">
  <delete failonerror="false" verbose="true">
    <fileset dir="build" includes="**/*.class"/>
  </delete>
  <delete dir="javadoc" quiet="true"/>
  <delete dir="dist" quiet="true"/>
  <delete dir="download" quiet="true"/>
  <delete dir="temp" quiet="true"/>
</target>

<!-- Run JUnit tests -->
<target name="test" depends="compile" description="run JUnit tests">
  <junit haltonerror="no" haltonfailure="no">
    <classpath refid="project.class.path"/>
    <batchtest fork="yes">
      <fileset dir="src">
	<!-- this will pick up every class with a name ending in Test -->
	<include name="**/*Test.java"/>
      </fileset>
    </batchtest>
    <formatter type="plain" usefile="false"/>       
  </junit>
</target>

 <!-- Javadoc -->
<target name="javadoc" depends="compile" description="prepare and post javadoc"> 
  <delete dir="javadoc" quiet="true"/> 
  <javadoc destdir="javadoc" author="true" version="true" use="true">  
    <fileset dir="src" includes="**/*.java"/>  
    <classpath refid="project.class.path"/>
  </javadoc>
  <!-- delete the old javadoc -->
  <delete quiet="true" dir="${javadocDest}"/> 
  <!-- copy everything you just made to the javadoc destination, and then make it readable -->
  <copy todir="${javadocDest}"> 
    <fileset dir="javadoc"/> 
  </copy> 
  <!-- Note: this only does the chmod command on the 
       javadoc subdirectory and its contents.  You MIGHT have to
       MANUALLY do the chmod on the parent directories.  However,
       you should only need to do that once. --> 
  <chmod dir="${javadocDest}" perm="755" type="dir" includes="**"/> 
  <chmod dir="${javadocDest}" perm="755" type="file" includes="**/*"/> 
  <echo>Javadoc deployed to ${javadocURL}</echo> 
 </target>

<!-- JAR -->
<target name="jar" depends="compile" description="JAR up files and put into dist directory">
  <mkdir dir="dist"/>
  <jar destfile="dist/${course}_${quarter}_${projectName}.jar" basedir="build">
    <manifest>
      <attribute name="Main-Class" value="${mainClass}"/>
    </manifest>
  </jar>
</target>

<!-- prepare tarball/zip files -->
<target name="download" depends="" description="prepare tarball and zip files">
  <delete quiet="true">
    <fileset dir="temp" includes="**/*"/>
    <fileset dir="download" includes="**/*"/>
  </delete>
  <mkdir dir="download"/>
  <mkdir dir="temp"/>
  <mkdir dir="temp/${projectName}"/>
  <copy todir="temp/${projectName}">
    <fileset dir="." excludes="build/**, javadoc/**, **/*~, temp/**, dist/**, download/**"/>
  </copy>
  <tar destfile="temp/${course}_${quarter}_${projectName}.tar" basedir="temp" includes="${projectName}/**"/>
  <gzip zipfile="download/${course}_${quarter}_${projectName}.tgz" src="temp/${course}_${quarter}_${projectName}.tar"/>
  <zip destfile="download/${course}_${quarter}_${projectName}.zip" basedir="temp" includes="${projectName}/**"/>  
  <delete quiet="true">
    <fileset dir="temp" includes="**/*"/>
  </delete>
</target>

<!-- Publish -->
<target name="publish" depends="jar, javadoc, download" description="publish everything to web">
  <mkdir dir="${webRoot}/${projectName}"/>
  
  <delete dir="${webRoot}/${projectName}/browse"/>
  <mkdir dir="${webRoot}/${projectName}/browse"/>
 
  <delete dir="${webRoot}/${projectName}/download"/>
  <mkdir dir="${webRoot}/${projectName}/download"/>
  
  <copy file="html/index.html" todir="${webRoot}/${projectName}"/>
  <copy todir="${webRoot}/${projectName}/download">
    <fileset dir="download"/>
    <fileset dir="dist"/>
  </copy>

  <copy file="build.xml" todir="${webRoot}/${projectName}/browse"/>
  <copy todir="${webRoot}/${projectName}/browse/src">
    <fileset dir="src"/>
  </copy>

  <chmod dir="${webRoot}/${projectName}" perm="755" type="both" includes="**/*"/>
  <echo>Project published to ${webBaseUrl}/${projectName}</echo>
</target>

</project>
